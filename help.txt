[OK] "args": [10, 5],
[Ok] "args": [5, 10],
[OK] "args": [1, 2, 3],
[OK] "args": [3, 2, 1],
[OK] "args": [2, 1, 3],
[OK] "args": [3, 1, 2],
[OK] "args": [10, 5,-9],
[OK] "args": [4, 3, 2, 1],
[OK] "args": [5, 4 ,3, 2, 1],
[OK] "args": [10, 5,-9, 14],

[OK] "args": [1, 3, 4, 5, 9],
[OK] "args": [9, 5 ,1, 3, 4],
[OK] "args": [3, 5 ,1, 9, 4, 50, 80, -99],

"args": [1, 3, 4, 0, 8, 9, 6, 2],

MaxInt: 2147483647
MinInt: -2147483647

-Index: Where the number must stay. This will be update in the begin of program. Through all the list and put the correct index in each number
-Position: Will be like a index in an array. It's the position of number right now! (correct or not). Exist in A and B. This will be update every time, to get the right position of each element.
-Target Position: Exist just in B. This will tell us where this number in B must stay in A.
-cost_A: Cost of A will be a target position of A. (-): RR. (+): R
-cost_B: Cost of B will be a position of B. (-): RR. (+): R

